/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Eternal Anvil (Backend)
 * The backend server for the Eternal Anvil.
 * OpenAPI spec version: v0.0.1
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  DiscordLogin,
  DiscordLoginRequest,
  TokenBlacklistRequest,
  TokenObtainPair,
  TokenObtainPairRequest,
  TokenRefresh,
  TokenRefreshRequest,
  UserRegisterRequest,
  UsersDiscordLoginErrorResponse400,
  UsersLoginErrorResponse400,
  UsersLoginRefreshErrorResponse400,
  UsersLogoutErrorResponse400,
  UsersRegister403,
  UsersRegisterErrorResponse400,
} from '../models';
import { queryInstance } from '../queryInstance';
import type { ErrorType, BodyType } from '../queryInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Endpoint to login a user and obtain a pair of `(access_token, refresh_token)`.
 * @summary Login user
 */
export const usersLogin = (
  tokenObtainPairRequest: BodyType<TokenObtainPairRequest>,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<TokenObtainPair>(
  { url: '/users/login/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tokenObtainPairRequest },
  options,
);

export const getUsersLoginMutationOptions = <TError = ErrorType<UsersLoginErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersLogin>>, TError, { data: BodyType<TokenObtainPairRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersLogin>>, TError, { data: BodyType<TokenObtainPairRequest> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersLogin>>, { data: BodyType<TokenObtainPairRequest> }> = (props) => {
    const { data } = props ?? {};

    return usersLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersLoginMutationResult = NonNullable<Awaited<ReturnType<typeof usersLogin>>>;
export type UsersLoginMutationBody = BodyType<TokenObtainPairRequest>;
export type UsersLoginMutationError = ErrorType<UsersLoginErrorResponse400>;

/**
 * @summary Login user
 */
export const useUsersLogin = <TError = ErrorType<UsersLoginErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersLogin>>, TError, { data: BodyType<TokenObtainPairRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersLogin>>,
  TError,
  { data: BodyType<TokenObtainPairRequest> },
  TContext
  > => {
  const mutationOptions = getUsersLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Login with Discord OAUTH2 flow.
 * @summary Login with Discord
 */
export const usersDiscordLogin = (
  discordLoginRequest: BodyType<DiscordLoginRequest>,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<DiscordLogin>(
  { url: '/users/login/discord/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: discordLoginRequest },
  options,
);

export const getUsersDiscordLoginMutationOptions = <TError = ErrorType<UsersDiscordLoginErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDiscordLogin>>, TError, { data: BodyType<DiscordLoginRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersDiscordLogin>>, TError, { data: BodyType<DiscordLoginRequest> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersDiscordLogin>>, { data: BodyType<DiscordLoginRequest> }> = (props) => {
    const { data } = props ?? {};

    return usersDiscordLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDiscordLoginMutationResult = NonNullable<Awaited<ReturnType<typeof usersDiscordLogin>>>;
export type UsersDiscordLoginMutationBody = BodyType<DiscordLoginRequest>;
export type UsersDiscordLoginMutationError = ErrorType<UsersDiscordLoginErrorResponse400>;

/**
 * @summary Login with Discord
 */
export const useUsersDiscordLogin = <TError = ErrorType<UsersDiscordLoginErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDiscordLogin>>, TError, { data: BodyType<DiscordLoginRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersDiscordLogin>>,
  TError,
  { data: BodyType<DiscordLoginRequest> },
  TContext
  > => {
  const mutationOptions = getUsersDiscordLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to refresh the user's `access_token` and `refresh_token`, from a valid `refresh_token`.

This will also return a new refresh token and invalidate the old one.
 * @summary Refresh access token
 */
export const usersLoginRefresh = (
  tokenRefreshRequest: BodyType<TokenRefreshRequest>,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<TokenRefresh>(
  { url: '/users/login/refresh/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tokenRefreshRequest },
  options,
);

export const getUsersLoginRefreshMutationOptions = <TError = ErrorType<UsersLoginRefreshErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersLoginRefresh>>, TError, { data: BodyType<TokenRefreshRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersLoginRefresh>>, TError, { data: BodyType<TokenRefreshRequest> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersLoginRefresh>>, { data: BodyType<TokenRefreshRequest> }> = (props) => {
    const { data } = props ?? {};

    return usersLoginRefresh(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersLoginRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof usersLoginRefresh>>>;
export type UsersLoginRefreshMutationBody = BodyType<TokenRefreshRequest>;
export type UsersLoginRefreshMutationError = ErrorType<UsersLoginRefreshErrorResponse400>;

/**
 * @summary Refresh access token
 */
export const useUsersLoginRefresh = <TError = ErrorType<UsersLoginRefreshErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersLoginRefresh>>, TError, { data: BodyType<TokenRefreshRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersLoginRefresh>>,
  TError,
  { data: BodyType<TokenRefreshRequest> },
  TContext
  > => {
  const mutationOptions = getUsersLoginRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to logout the user, by blacklisting it's `access_token` and `refresh_token`, from a valid `refresh_token`.
 * @summary Logout user
 */
export const usersLogout = (
  tokenBlacklistRequest: BodyType<TokenBlacklistRequest>,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<void>(
  { url: '/users/logout/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tokenBlacklistRequest },
  options,
);

export const getUsersLogoutMutationOptions = <TError = ErrorType<UsersLogoutErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersLogout>>, TError, { data: BodyType<TokenBlacklistRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersLogout>>, TError, { data: BodyType<TokenBlacklistRequest> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersLogout>>, { data: BodyType<TokenBlacklistRequest> }> = (props) => {
    const { data } = props ?? {};

    return usersLogout(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof usersLogout>>>;
export type UsersLogoutMutationBody = BodyType<TokenBlacklistRequest>;
export type UsersLogoutMutationError = ErrorType<UsersLogoutErrorResponse400>;

/**
 * @summary Logout user
 */
export const useUsersLogout = <TError = ErrorType<UsersLogoutErrorResponse400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersLogout>>, TError, { data: BodyType<TokenBlacklistRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersLogout>>,
  TError,
  { data: BodyType<TokenBlacklistRequest> },
  TContext
  > => {
  const mutationOptions = getUsersLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to register users.
 * @summary Register user
 */
export const usersRegister = (
  userRegisterRequest: BodyType<UserRegisterRequest>,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<unknown>(
  { url: '/users/register/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: userRegisterRequest },
  options,
);

export const getUsersRegisterMutationOptions = <TError = ErrorType<UsersRegisterErrorResponse400 | UsersRegister403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersRegister>>, TError, { data: BodyType<UserRegisterRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersRegister>>, TError, { data: BodyType<UserRegisterRequest> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersRegister>>, { data: BodyType<UserRegisterRequest> }> = (props) => {
    const { data } = props ?? {};

    return usersRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof usersRegister>>>;
export type UsersRegisterMutationBody = BodyType<UserRegisterRequest>;
export type UsersRegisterMutationError = ErrorType<UsersRegisterErrorResponse400 | UsersRegister403>;

/**
 * @summary Register user
 */
export const useUsersRegister = <TError = ErrorType<UsersRegisterErrorResponse400 | UsersRegister403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersRegister>>, TError, { data: BodyType<UserRegisterRequest> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersRegister>>,
  TError,
  { data: BodyType<UserRegisterRequest> },
  TContext
  > => {
  const mutationOptions = getUsersRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
