/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Eternal Anvil (Backend)
 * The backend server for the Eternal Anvil.
 * OpenAPI spec version: v0.0.1
 */
import {
  useMutation,
  useQuery,
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  PatchedUserProfileRequest,
  UserChangePasswordRequest,
  UserProfile,
  UserProfileRequest,
  UserWhoami,
  UsersChangePassword401,
  UsersChangePasswordErrorResponse400,
  UsersProfilePartialUpdateErrorResponse400,
  UsersProfileRetrieveErrorResponse400,
  UsersProfileUpdateErrorResponse400,
  UsersWhoamiErrorResponse400,
} from '../models';
import { queryInstance } from '../queryInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Endpoint to change a user's password.
 * @summary Change user's password
 */
export const usersChangePassword = (
  userChangePasswordRequest: UserChangePasswordRequest,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<unknown>(
  { url: '/users/change_password/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: userChangePasswordRequest },
  options,
);

export const getUsersChangePasswordMutationOptions = <TError = UsersChangePasswordErrorResponse400 | UsersChangePassword401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersChangePassword>>, TError, { data: UserChangePasswordRequest }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersChangePassword>>, TError, { data: UserChangePasswordRequest }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersChangePassword>>, { data: UserChangePasswordRequest }> = (props) => {
    const { data } = props ?? {};

    return usersChangePassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof usersChangePassword>>>;
export type UsersChangePasswordMutationBody = UserChangePasswordRequest;
export type UsersChangePasswordMutationError = UsersChangePasswordErrorResponse400 | UsersChangePassword401;

/**
 * @summary Change user's password
 */
export const useUsersChangePassword = <TError = UsersChangePasswordErrorResponse400 | UsersChangePassword401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersChangePassword>>, TError, { data: UserChangePasswordRequest }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersChangePassword>>,
  TError,
  { data: UserChangePasswordRequest },
  TContext
  > => {
  const mutationOptions = getUsersChangePasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to retrieve the current user's details.
 * @summary Get user details
 */
export const usersProfileRetrieve = (options?: SecondParameter<typeof queryInstance>, signal?: AbortSignal) => queryInstance<UserProfile>(
  { url: '/users/profile/', method: 'GET', signal },
  options,
);

export const getUsersProfileRetrieveQueryKey = () => ['/users/profile/'] as const;

export const getUsersProfileRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof usersProfileRetrieve>>, TError = UsersProfileRetrieveErrorResponse400>(options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersProfileRetrieve>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersProfileRetrieveQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersProfileRetrieve>>> = ({ signal }) => usersProfileRetrieve(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof usersProfileRetrieve>>, TError, TData> & { queryKey: QueryKey };
};

export type UsersProfileRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof usersProfileRetrieve>>>;
export type UsersProfileRetrieveQueryError = UsersProfileRetrieveErrorResponse400;

/**
 * @summary Get user details
 */
export const useUsersProfileRetrieve = <TData = Awaited<ReturnType<typeof usersProfileRetrieve>>, TError = UsersProfileRetrieveErrorResponse400>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersProfileRetrieve>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersProfileRetrieveQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Endpoint to partially update the current user's details.
 * @summary Update user details
 */
export const usersProfileUpdate = (
  userProfileRequest: UserProfileRequest,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<UserProfile>(
  { url: '/users/profile/',
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: userProfileRequest },
  options,
);

export const getUsersProfileUpdateMutationOptions = <TError = UsersProfileUpdateErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersProfileUpdate>>, TError, { data: UserProfileRequest }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersProfileUpdate>>, TError, { data: UserProfileRequest }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersProfileUpdate>>, { data: UserProfileRequest }> = (props) => {
    const { data } = props ?? {};

    return usersProfileUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersProfileUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersProfileUpdate>>>;
export type UsersProfileUpdateMutationBody = UserProfileRequest;
export type UsersProfileUpdateMutationError = UsersProfileUpdateErrorResponse400;

/**
 * @summary Update user details
 */
export const useUsersProfileUpdate = <TError = UsersProfileUpdateErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersProfileUpdate>>, TError, { data: UserProfileRequest }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersProfileUpdate>>,
  TError,
  { data: UserProfileRequest },
  TContext
  > => {
  const mutationOptions = getUsersProfileUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to fully override the current user's details.
 * @summary Patch user details
 */
export const usersProfilePartialUpdate = (
  patchedUserProfileRequest: PatchedUserProfileRequest,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<UserProfile>(
  { url: '/users/profile/',
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: patchedUserProfileRequest },
  options,
);

export const getUsersProfilePartialUpdateMutationOptions = <TError = UsersProfilePartialUpdateErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersProfilePartialUpdate>>, TError, { data: PatchedUserProfileRequest }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof usersProfilePartialUpdate>>, TError, { data: PatchedUserProfileRequest }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersProfilePartialUpdate>>, { data: PatchedUserProfileRequest }> = (props) => {
    const { data } = props ?? {};

    return usersProfilePartialUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersProfilePartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersProfilePartialUpdate>>>;
export type UsersProfilePartialUpdateMutationBody = PatchedUserProfileRequest;
export type UsersProfilePartialUpdateMutationError = UsersProfilePartialUpdateErrorResponse400;

/**
 * @summary Patch user details
 */
export const useUsersProfilePartialUpdate = <TError = UsersProfilePartialUpdateErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersProfilePartialUpdate>>, TError, { data: PatchedUserProfileRequest }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof usersProfilePartialUpdate>>,
  TError,
  { data: PatchedUserProfileRequest },
  TContext
  > => {
  const mutationOptions = getUsersProfilePartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to retrieve the current logged in user.
 * @summary Get current user
 */
export const usersWhoami = (options?: SecondParameter<typeof queryInstance>, signal?: AbortSignal) => queryInstance<UserWhoami>(
  { url: '/users/whoami/', method: 'GET', signal },
  options,
);

export const getUsersWhoamiQueryKey = () => ['/users/whoami/'] as const;

export const getUsersWhoamiQueryOptions = <TData = Awaited<ReturnType<typeof usersWhoami>>, TError = UsersWhoamiErrorResponse400>(options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersWhoami>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersWhoamiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersWhoami>>> = ({ signal }) => usersWhoami(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof usersWhoami>>, TError, TData> & { queryKey: QueryKey };
};

export type UsersWhoamiQueryResult = NonNullable<Awaited<ReturnType<typeof usersWhoami>>>;
export type UsersWhoamiQueryError = UsersWhoamiErrorResponse400;

/**
 * @summary Get current user
 */
export const useUsersWhoami = <TData = Awaited<ReturnType<typeof usersWhoami>>, TError = UsersWhoamiErrorResponse400>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersWhoami>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersWhoamiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
