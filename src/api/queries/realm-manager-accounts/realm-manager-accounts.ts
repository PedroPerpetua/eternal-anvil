/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Eternal Anvil (Backend)
 * The backend server for the Eternal Anvil.
 * OpenAPI spec version: v0.0.1
 */
import {
  useMutation,
  useQuery,
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AccountDetails,
  JoinAccount,
  ListCreateAccount,
  RealmManagerAccountsCreateErrorResponse400,
  RealmManagerAccountsDestroy403,
  RealmManagerAccountsDestroyErrorResponse400,
  RealmManagerAccountsJoinCreate403,
  RealmManagerAccountsJoinCreateErrorResponse400,
  RealmManagerAccountsLeaveDestroyErrorResponse400,
  RealmManagerAccountsListErrorResponse400,
  RealmManagerAccountsRemoveDestroyErrorResponse400,
  RealmManagerAccountsRetrieveErrorResponse400,
  RealmManagerAccountsUpdate403,
  RealmManagerAccountsUpdateErrorResponse400,
} from '../../models';
import { queryInstance } from '../../queryInstance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
  >;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Endpoint to list Accounts.
 */
export const realmManagerAccountsList = (options?: SecondParameter<typeof queryInstance>, signal?: AbortSignal) => queryInstance<ListCreateAccount[]>(
  { url: '/realm-manager/accounts/', method: 'GET', signal },
  options,
);

export const getRealmManagerAccountsListQueryKey = () => ['/realm-manager/accounts/'] as const;

export const getRealmManagerAccountsListQueryOptions = <TData = Awaited<ReturnType<typeof realmManagerAccountsList>>, TError = RealmManagerAccountsListErrorResponse400>(options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof realmManagerAccountsList>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRealmManagerAccountsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof realmManagerAccountsList>>> = ({ signal }) => realmManagerAccountsList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof realmManagerAccountsList>>, TError, TData> & { queryKey: QueryKey };
};

export type RealmManagerAccountsListQueryResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsList>>>;
export type RealmManagerAccountsListQueryError = RealmManagerAccountsListErrorResponse400;

export const useRealmManagerAccountsList = <TData = Awaited<ReturnType<typeof realmManagerAccountsList>>, TError = RealmManagerAccountsListErrorResponse400>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof realmManagerAccountsList>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRealmManagerAccountsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Endpoint to create Accounts.
 */
export const realmManagerAccountsCreate = (
  listCreateAccount: NonReadonly<ListCreateAccount>,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<ListCreateAccount>(
  { url: '/realm-manager/accounts/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: listCreateAccount },
  options,
);

export const getRealmManagerAccountsCreateMutationOptions = <TError = RealmManagerAccountsCreateErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsCreate>>, TError, { data: NonReadonly<ListCreateAccount> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsCreate>>, TError, { data: NonReadonly<ListCreateAccount> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof realmManagerAccountsCreate>>, { data: NonReadonly<ListCreateAccount> }> = (props) => {
    const { data } = props ?? {};

    return realmManagerAccountsCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RealmManagerAccountsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsCreate>>>;
export type RealmManagerAccountsCreateMutationBody = NonReadonly<ListCreateAccount>;
export type RealmManagerAccountsCreateMutationError = RealmManagerAccountsCreateErrorResponse400;

export const useRealmManagerAccountsCreate = <TError = RealmManagerAccountsCreateErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsCreate>>, TError, { data: NonReadonly<ListCreateAccount> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof realmManagerAccountsCreate>>,
  TError,
  { data: NonReadonly<ListCreateAccount> },
  TContext
  > => {
  const mutationOptions = getRealmManagerAccountsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to retrieve an Account.
 */
export const realmManagerAccountsRetrieve = (
  id: string,
  options?: SecondParameter<typeof queryInstance>,
  signal?: AbortSignal,
) => queryInstance<AccountDetails>(
  { url: `/realm-manager/accounts/${id}/`, method: 'GET', signal },
  options,
);

export const getRealmManagerAccountsRetrieveQueryKey = (id: string) => [`/realm-manager/accounts/${id}/`] as const;

export const getRealmManagerAccountsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof realmManagerAccountsRetrieve>>, TError = RealmManagerAccountsRetrieveErrorResponse400>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof realmManagerAccountsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRealmManagerAccountsRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof realmManagerAccountsRetrieve>>> = ({ signal }) => realmManagerAccountsRetrieve(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(id), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof realmManagerAccountsRetrieve>>, TError, TData> & { queryKey: QueryKey };
};

export type RealmManagerAccountsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsRetrieve>>>;
export type RealmManagerAccountsRetrieveQueryError = RealmManagerAccountsRetrieveErrorResponse400;

export const useRealmManagerAccountsRetrieve = <TData = Awaited<ReturnType<typeof realmManagerAccountsRetrieve>>, TError = RealmManagerAccountsRetrieveErrorResponse400>(
  id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof realmManagerAccountsRetrieve>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRealmManagerAccountsRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Endpoint to update an Account's owner. Only the owner can call this endpoint.
 */
export const realmManagerAccountsUpdate = (
  id: string,
  accountDetails: NonReadonly<AccountDetails>,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<unknown>(
  { url: `/realm-manager/accounts/${id}/`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: accountDetails },
  options,
);

export const getRealmManagerAccountsUpdateMutationOptions = <TError = RealmManagerAccountsUpdateErrorResponse400 | RealmManagerAccountsUpdate403,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsUpdate>>, TError, { id: string;data: NonReadonly<AccountDetails> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsUpdate>>, TError, { id: string;data: NonReadonly<AccountDetails> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof realmManagerAccountsUpdate>>, { id: string;data: NonReadonly<AccountDetails> }> = (props) => {
    const { id, data } = props ?? {};

    return realmManagerAccountsUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RealmManagerAccountsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsUpdate>>>;
export type RealmManagerAccountsUpdateMutationBody = NonReadonly<AccountDetails>;
export type RealmManagerAccountsUpdateMutationError = RealmManagerAccountsUpdateErrorResponse400 | RealmManagerAccountsUpdate403;

export const useRealmManagerAccountsUpdate = <TError = RealmManagerAccountsUpdateErrorResponse400 | RealmManagerAccountsUpdate403,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsUpdate>>, TError, { id: string;data: NonReadonly<AccountDetails> }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof realmManagerAccountsUpdate>>,
  TError,
  { id: string;data: NonReadonly<AccountDetails> },
  TContext
  > => {
  const mutationOptions = getRealmManagerAccountsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to delete Accounts. Only the owner can call this endpoint.
 */
export const realmManagerAccountsDestroy = (
  id: string,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<unknown>(
  { url: `/realm-manager/accounts/${id}/`, method: 'DELETE' },
  options,
);

export const getRealmManagerAccountsDestroyMutationOptions = <TError = RealmManagerAccountsDestroyErrorResponse400 | RealmManagerAccountsDestroy403,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsDestroy>>, TError, { id: string }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsDestroy>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof realmManagerAccountsDestroy>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return realmManagerAccountsDestroy(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RealmManagerAccountsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsDestroy>>>;

export type RealmManagerAccountsDestroyMutationError = RealmManagerAccountsDestroyErrorResponse400 | RealmManagerAccountsDestroy403;

export const useRealmManagerAccountsDestroy = <TError = RealmManagerAccountsDestroyErrorResponse400 | RealmManagerAccountsDestroy403,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsDestroy>>, TError, { id: string }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof realmManagerAccountsDestroy>>,
  TError,
  { id: string },
  TContext
  > => {
  const mutationOptions = getRealmManagerAccountsDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to leave the Account.
 */
export const realmManagerAccountsLeaveDestroy = (
  id: string,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<void>(
  { url: `/realm-manager/accounts/${id}/leave/`, method: 'DELETE' },
  options,
);

export const getRealmManagerAccountsLeaveDestroyMutationOptions = <TError = RealmManagerAccountsLeaveDestroyErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsLeaveDestroy>>, TError, { id: string }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsLeaveDestroy>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof realmManagerAccountsLeaveDestroy>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return realmManagerAccountsLeaveDestroy(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RealmManagerAccountsLeaveDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsLeaveDestroy>>>;

export type RealmManagerAccountsLeaveDestroyMutationError = RealmManagerAccountsLeaveDestroyErrorResponse400;

export const useRealmManagerAccountsLeaveDestroy = <TError = RealmManagerAccountsLeaveDestroyErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsLeaveDestroy>>, TError, { id: string }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof realmManagerAccountsLeaveDestroy>>,
  TError,
  { id: string },
  TContext
  > => {
  const mutationOptions = getRealmManagerAccountsLeaveDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to remove a User from the Account. Only the owner can use this endpoint.
 */
export const realmManagerAccountsRemoveDestroy = (
  id: string,
  userId: string,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<void>(
  { url: `/realm-manager/accounts/${id}/remove/${userId}/`, method: 'DELETE' },
  options,
);

export const getRealmManagerAccountsRemoveDestroyMutationOptions = <TError = RealmManagerAccountsRemoveDestroyErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsRemoveDestroy>>, TError, { id: string;userId: string }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsRemoveDestroy>>, TError, { id: string;userId: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof realmManagerAccountsRemoveDestroy>>, { id: string;userId: string }> = (props) => {
    const { id, userId } = props ?? {};

    return realmManagerAccountsRemoveDestroy(id, userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RealmManagerAccountsRemoveDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsRemoveDestroy>>>;

export type RealmManagerAccountsRemoveDestroyMutationError = RealmManagerAccountsRemoveDestroyErrorResponse400;

export const useRealmManagerAccountsRemoveDestroy = <TError = RealmManagerAccountsRemoveDestroyErrorResponse400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsRemoveDestroy>>, TError, { id: string;userId: string }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof realmManagerAccountsRemoveDestroy>>,
  TError,
  { id: string;userId: string },
  TContext
  > => {
  const mutationOptions = getRealmManagerAccountsRemoveDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Endpoint to join existing Accounts.
 */
export const realmManagerAccountsJoinCreate = (
  joinAccount: JoinAccount,
  options?: SecondParameter<typeof queryInstance>,
) => queryInstance<unknown>(
  { url: '/realm-manager/accounts/join/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: joinAccount },
  options,
);

export const getRealmManagerAccountsJoinCreateMutationOptions = <TError = RealmManagerAccountsJoinCreateErrorResponse400 | RealmManagerAccountsJoinCreate403,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsJoinCreate>>, TError, { data: JoinAccount }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsJoinCreate>>, TError, { data: JoinAccount }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof realmManagerAccountsJoinCreate>>, { data: JoinAccount }> = (props) => {
    const { data } = props ?? {};

    return realmManagerAccountsJoinCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RealmManagerAccountsJoinCreateMutationResult = NonNullable<Awaited<ReturnType<typeof realmManagerAccountsJoinCreate>>>;
export type RealmManagerAccountsJoinCreateMutationBody = JoinAccount;
export type RealmManagerAccountsJoinCreateMutationError = RealmManagerAccountsJoinCreateErrorResponse400 | RealmManagerAccountsJoinCreate403;

export const useRealmManagerAccountsJoinCreate = <TError = RealmManagerAccountsJoinCreateErrorResponse400 | RealmManagerAccountsJoinCreate403,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof realmManagerAccountsJoinCreate>>, TError, { data: JoinAccount }, TContext>, request?: SecondParameter<typeof queryInstance> },
  ): UseMutationResult<
  Awaited<ReturnType<typeof realmManagerAccountsJoinCreate>>,
  TError,
  { data: JoinAccount },
  TContext
  > => {
  const mutationOptions = getRealmManagerAccountsJoinCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
