/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Eternal Anvil (Backend)
 * The backend server for the Eternal Anvil.
 * OpenAPI spec version: v0.0.1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ListGameWorld,
  RealmManagerGameWorldsListErrorResponse400,
} from '../models';
import { queryInstance } from '../queryInstance';
import type { ErrorType } from '../queryInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Endpoint to list Game Worlds.
 */
export const realmManagerGameWorldsList = (options?: SecondParameter<typeof queryInstance>, signal?: AbortSignal) => queryInstance<ListGameWorld[]>(
  { url: '/realm-manager/game-worlds/', method: 'GET', signal },
  options,
);

export const getRealmManagerGameWorldsListQueryKey = () => ['/realm-manager/game-worlds/'] as const;

export const getRealmManagerGameWorldsListQueryOptions = <TData = Awaited<ReturnType<typeof realmManagerGameWorldsList>>, TError = ErrorType<RealmManagerGameWorldsListErrorResponse400>>(options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof realmManagerGameWorldsList>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRealmManagerGameWorldsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof realmManagerGameWorldsList>>> = ({ signal }) => realmManagerGameWorldsList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof realmManagerGameWorldsList>>, TError, TData> & { queryKey: QueryKey };
};

export type RealmManagerGameWorldsListQueryResult = NonNullable<Awaited<ReturnType<typeof realmManagerGameWorldsList>>>;
export type RealmManagerGameWorldsListQueryError = ErrorType<RealmManagerGameWorldsListErrorResponse400>;

export const useRealmManagerGameWorldsList = <TData = Awaited<ReturnType<typeof realmManagerGameWorldsList>>, TError = ErrorType<RealmManagerGameWorldsListErrorResponse400>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof realmManagerGameWorldsList>>, TError, TData>>, request?: SecondParameter<typeof queryInstance> },

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRealmManagerGameWorldsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
