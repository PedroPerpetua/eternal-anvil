import { Icon } from 'leaflet';

/*
 * For the purpose of "empty numbers" (missing input) we use Infinity to make type checking more
 * fluid.
*/
export type Point = [number, number];

/**
 * A collection of points. Note: may actually be more than three points; this is primarily used for
 * affine transformations, and the transform-matrix lib uses only the first three points of an
 * array.
 */
export type Triangle = [Point, Point, Point];

/**
 * Hex color code for CSS purposes.
 */
export type HexColor = `#${string}`;

/**
 * Type of the ids generated by the crypto.randomUUID (uuid4)
 */
export type Id = `${string}-${string}-${string}-${string}-${string}`;

/**
 * Represents the added distance penalty to missions.
 */
export type DistancePenalty = {
  shortName: string;
  description: string;
  penalty: number;
};

/**
 * Represents an enum of all the distance penalties.
 */
export type DistancePenaltyMap = {
  [
  key in 'JOIN_FORT_RELIC' | 'GOBLIN_TOWER' | 'SUPPORT' | 'RAID' | 'CONQUER_DESTROY'
  ]: DistancePenalty;
};

export type Structure = {
  name: string;
  icon: Icon;
};

export type StructureMap = {
  [key in 'ARK' | 'TOWER' | 'PORTAL' | 'RELIC' | 'FORT']: Structure
};
